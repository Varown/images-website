{"version":3,"sources":["components/Header.js","components/Footer.js","components/Loading.js","App.js","serviceWorker.js","index.js","logo.svg","models/index.js","stores/user.js","stores/history.js","stores/image.js","stores/auth.js","stores/index.js"],"names":["StyledHeader","styled","header","Logos","img","StyledLink","NavLink","Login","div","StyledButton","Button","Header","observer","useStores","UserStore","AuthStore","history","useHistory","src","Logo","alt","exact","to","activeClassName","currentUser","attributes","username","type","onClick","logout","push","StyledFooter","footer","Footer","Loading","Home","lazy","History","About","Register","App","fallback","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports","AV","init","appId","appKey","serverURL","Auth","password","user","User","setUsername","setPassword","Promise","resolve","reject","signUp","loginedUser","logIn","logOut","current","Uploader","file","filename","item","Object","avFile","File","set","save","serverFile","page","limit","query","Query","include","skip","descending","equalTo","find","results","this","observable","action","newList","list","concat","isLoading","log","append","length","hasMore","finally","newFilename","newFile","isUpoading","err","values","pullUser","resetUser","HistoryStore","reset","ImageStore","context","createContext","useContext"],"mappings":"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","file":"static/js/main.330d8050.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Logo from \"../logo.svg\"\r\nimport {NavLink,useHistory } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { Button } from 'antd';\r\nimport  {useStores} from \"../stores\";\r\nimport { observer } from 'mobx-react';\r\n\r\nconst StyledHeader=styled.header`\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 10px 100px;\r\n  background-color: #F44336;\r\n  color: #fff;\r\n`\r\n\r\nconst Logos=styled.img`\r\nheight: 30px;\r\n`\r\n\r\nconst StyledLink=styled(NavLink)`\r\ntext-decoration: none;\r\ncolor: #fff;\r\nmargin-left: 30px;\r\n&.active{\r\nborder-bottom: 1px solid #fff;\r\n}\r\n`\r\n\r\nconst Login = styled.div`\r\n  margin-left: auto;\r\n`;\r\nconst StyledButton=styled(Button)`\r\nmargin-left: 10px;\r\n`\r\n\r\n\r\nconst Header=observer(()=>{\r\n  const {UserStore,AuthStore}=useStores()\r\nconst history=useHistory()\r\n  const handleLogout=()=>{\r\n    AuthStore.logout()\r\n  }\r\n\r\n\r\n  const handleLogin=()=>{\r\n    history.push('/login');\r\n  }\r\n\r\n  const handleRegister=()=>{\r\n    history.push('/register');\r\n  }\r\n\r\n\r\n  return(\r\n    <StyledHeader>\r\n      <Logos src={Logo} alt={Logo}/>\r\n      <nav>\r\n        <StyledLink exact to=\"/\" activeClassName=\"active\"  >首页</StyledLink>\r\n        <StyledLink  exact to=\"/history\" activeClassName=\"active\">上传历史</StyledLink>\r\n        <StyledLink  exact to=\"/about\" activeClassName=\"active\">关于我</StyledLink>\r\n      </nav>\r\n      <Login>\r\n        {\r\n          UserStore.currentUser ?<>\r\n              {UserStore.currentUser.attributes.username}\r\n              <StyledButton type=\"primary\" onClick={handleLogout}>注销</StyledButton>\r\n            </> :\r\n            <>\r\n              <StyledButton type=\"primary\" onClick={handleLogin} > 登陆</StyledButton>\r\n              <StyledButton type=\"primary\" onClick={handleRegister}>注册</StyledButton>\r\n            </>\r\n\r\n        }\r\n      </Login>\r\n    </StyledHeader>\r\n  )})\r\n\r\n\r\n\r\n\r\n\r\nexport default Header","import React from \"react\";\r\nimport styled from 'styled-components'\r\nconst StyledFooter = styled.footer`\r\n  padding: 10px 100px;\r\n  text-align: center;\r\n  font-size: 12px;\r\n  color: #aaa;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nfunction Footer() {\r\n  return(\r\n    <StyledFooter>\r\n      <p>Footer</p>\r\n    </StyledFooter>\r\n  )\r\n\r\n}\r\n\r\nexport default Footer","import React from \"react\";\r\n\r\nfunction Loading() {\r\n  return(\r\n      <p>Loading...</p>\r\n  )\r\n\r\n}\r\n\r\nexport default Loading","import React,{Suspense,lazy} from 'react';\nimport './App.css'\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport Loading from './components/Loading'\nimport {Switch, Route} from \"react-router-dom\";\n\nconst Home = lazy(() => import('./pages/Home'));\n\nconst History = lazy(() => import('./pages/History'));\n\nconst About = lazy(() => import('./pages/About'));\n\nconst Login = lazy(() => import('./pages/Login'));\nconst Register = lazy(() => import('./pages/Register'));\n\n\nfunction App() {\n  return (\n    <>\n      <Header/>\n      <main>\n        <Suspense fallback={<Loading/>}>\n        <Switch>\n         <Route path=\"/\" component={Home} exact />\n         <Route path=\"/history\" component={History} />\n         <Route path=\"/about\" component={About} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/register\" component={Register} />\n       </Switch>\n       </Suspense>\n      </main>\n      <Footer/>\n\n      </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter as Router} from 'react-router-dom';\nimport 'antd/dist/antd.css'\n\nReactDOM.render(\n\n    <Router>\n      <App />\n    </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.e87f64e8.svg\";","import AV, { User} from 'leancloud-storage'\r\n\r\n\r\nAV.init({\r\n  appId: \"23wBe6Q7zmMsGnhXBh5YM71G-gzGzoHsz\",\r\n  appKey: \"tPIm3QslCu06HtwqJ1KvVqFE\",\r\n  serverURL: \"https://23wbe6q7.lc-cn-n1-shared.com\"\r\n});\r\n\r\nconst Auth={\r\n  register(username,password){\r\n    let user=new User()\r\n    user.setUsername(username)\r\n    user.setPassword(password)\r\n    return new Promise((resolve,reject)=>{\r\n      user.signUp().then(\r\n        loginedUser=>resolve(resolve),\r\n        error=>reject(reject))\r\n\r\n    });},\r\n\r\n  login(username,password){\r\n    return new Promise((resolve,reject)=>{\r\n     AV.User.logIn(username, password).then(\r\n    loginedUser=>resolve(resolve),\r\n    error=>reject(reject)\r\n  )\r\n})},\r\n\r\n  logout(){\r\n    User.logOut();\r\n\r\n  },\r\n\r\ngetCurrentUser(){\r\n    return User.current()\r\n}\r\n\r\n};\r\n\r\nconst Uploader = {\r\n  add(file, filename) {\r\n    const item = new AV.Object('Image');\r\n    const avFile = new AV.File(filename, file);\r\n    item.set('filename', filename);\r\n    item.set('owner', AV.User.current());\r\n    item.set('url', avFile);\r\n    return new Promise((resolve, reject) => {\r\n      item.save().then(serverFile => resolve(serverFile), error => reject(error));\r\n    });\r\n  },\r\n  find({page=0, limit=10}) {\r\n    const query = new AV.Query('Image');\r\n    query.include('owner');\r\n    query.limit(limit);\r\n    query.skip(page*limit);\r\n    query.descending('createdAt');\r\n    query.equalTo('owner', AV.User.current());\r\n    return new Promise((resolve, reject) => {\r\n      query.find()\r\n        .then(results => resolve(results))\r\n        .catch(error => reject(error))\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport {Auth,Uploader}","import { observable, action } from 'mobx';\r\nimport { Auth } from '../models';\r\n\r\nclass UserStore {\r\n  @observable currentUser = null;\r\n\r\n  @action pullUser() {\r\n    this.currentUser = Auth.getCurrentUser()\r\n  }\r\n\r\n  @action resetUser() {\r\n    this.currentUser = null;\r\n  }\r\n}\r\n\r\n\r\nexport default new UserStore() ;","import { observable, action } from 'mobx';\r\nimport { Uploader } from '../models';\r\n\r\nclass HistoryStore {\r\n  @observable list = [];\r\n  @observable isLoading=false\r\n  @observable  hasMore=true\r\n  @observable page=0\r\n  limit=10\r\n\r\n\r\n  @action append(newList) {\r\n  this.list=this.list.concat(newList)\r\n  }\r\n\r\n  @action find () {\r\n    this.isLoading=true\r\n\r\n   Uploader.find({page:this.page,limit:this.limit})\r\n     .then(newList=>{\r\n       console.log(newList)\r\n\r\n       this.append(newList)\r\n       this.page++\r\n       if(newList.length<this.limit){\r\n         this.hasMore=false\r\n       }\r\n       }\r\n  ).catch(\r\n\r\n   ).finally(()=>{\r\n       this.isLoading=false\r\n   })\r\n\r\n  }\r\n  @action reset() {\r\n    this.list = [];\r\n    this.isLoading = false;\r\n    this.hasMore = true;\r\n    this.page = 0;\r\n  }\r\n}\r\n\r\n\r\nexport default new HistoryStore() ;","import { observable, action } from 'mobx';\r\nimport { Uploader } from '../models';\r\nimport {message} from \"antd\";\r\n\r\nclass ImageStore {\r\n  @observable filename = \"\";\r\n  @observable file = null;\r\n  @observable isUpoading = false;\r\n  @observable serverFile = null;\r\n\r\n  @action setFilename(newFilename) {\r\n    this.filename = newFilename;\r\n  }\r\n\r\n  @action setFile(newFile) {\r\n    this.file = newFile;\r\n  }\r\n\r\n  @action upload() {\r\n    this.isUpoading = true;\r\n    this.serverFile=null\r\n    return new Promise((resolve, reject) => {\r\n      Uploader.add(this.file, this.filename)\r\n        .then(serverFile => {\r\n          this.serverFile = serverFile;\r\n          resolve(serverFile);\r\n        }).catch(err => {\r\n          message.error('上传失败')\r\n        reject(err);\r\n      }).finally(() => {\r\n        this.isUpoading = false;\r\n      });\r\n    })\r\n\r\n  }\r\n\r\n  @action reset() {\r\n    this.isUpoading = false;\r\n    this.serverFile = null;\r\n  }\r\n}\r\n\r\n\r\nexport default new ImageStore();\r\n","import { observable, action } from 'mobx';\r\nimport { Auth } from '../models';\r\nimport UserStore from  './user'\r\nimport HistoryStore from './history';\r\nimport ImageStore from './image'\r\nimport {message} from \"antd\";\r\n\r\nclass AuthStore {\r\n\r\n  @observable values = {\r\n    username: '',\r\n    password: ''\r\n  };\r\n\r\n  @action setUsername(username) {\r\n    this.values.username = username;\r\n  }\r\n\r\n  @action setPassword(password) {\r\n    this.values.password = password;\r\n  }\r\n\r\n  @action login() {\r\n    return new Promise((resolve,reject)=>{\r\n      Auth.login(this.values.username, this.values.password)\r\n        .then(user => {\r\n          console.log(\"登陆成功\");\r\n          UserStore.pullUser()\r\n          resolve(user)\r\n        }).catch(err => {\r\n        console.log(\"登陆失败\");\r\n        message.error(\"登陆失败\")\r\n        UserStore.resetUser()\r\n        reject(err)\r\n      })\r\n    })\r\n\r\n  }\r\n  @action register() {\r\n    return new Promise((resolve,reject)=>{\r\n      Auth.register(this.values.username, this.values.password)\r\n        .then(user => {\r\n          UserStore.pullUser()\r\n          resolve(user)\r\n        }).catch(err => {\r\n          UserStore.resetUser()\r\n        message.error(\"注册失败\")\r\n        reject(err)\r\n      })\r\n    })\r\n  }\r\n\r\n  @action logout() {\r\n    Auth.logout()\r\n    UserStore.resetUser()\r\n    HistoryStore.reset();\r\n    ImageStore.reset();\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default new AuthStore()  ;\r\n","import { createContext, useContext } from 'react';\r\nimport AuthStore from './auth';\r\nimport UserStore from  './user';\r\nimport ImageStore from  './image';\r\nimport HistoryStore from  './history';\r\n\r\nconst context = createContext({\r\n  AuthStore,\r\n  UserStore,\r\n  ImageStore,\r\n  HistoryStore\r\n});\r\n\r\nexport const useStores = () => useContext(context);"],"sourceRoot":""}